// Variables
var clients = [];// Tous les clients connectés aux serveurs actuellement
var file = [];// Clients en attente d'adversaires
var games = new Map();// Clients en games tableau clès : valeur ; on enregistre les clients dans les les deux sens clès : valeur ; et vice versa

/*------------ Fonction recherche de joueur : associe les deux premiers dans la file ------------------*/
searchplayer = function searchplayer(socket){
    file.push(socket);
    console.log("La file d'attente :");
    printFile();
    socket.emit("receiveAlert","Recherche d'un partie")

    let find = false;
    for ( let element of file ){ 
        if( element.id != socket.id ){
            games.set(element,socket);
            games.set(socket,element);
            find = true;
            console.log( "joueur trouvée !" );
            console.log( "connection entre :"+ games.get(socket).id +" et "+ socket.id );
            break;
        }
    };
    return find ? true : false;
}

/*------------ Vérification si joueurs en partie vrai sinon ------------------*/
isOnGame = function isOnGame(socket){
    if ( games.get(socket) != undefined ){ return true }else{ return false;}
}

/*------------  Mise à jour de la file d'attente ------------------*/
updateWaitingFile = function updateWaitingFile(socket){
    file = arrayRemove(file,socket);
    file = arrayRemove(file,games.get(socket));
    console.log("FileModule :"+file)
    for ( let element of file ){ 
        console.log(element.id);
    }
    return file;
}

/*------------  Enlève les joueurs de leurs parties ------------------*/
disconnectPlayers = function disconnectPlayers(socket,games){
    games.delete(socket);
    games.delete(games.get(socket));
    // TODO : gestion de fin de partie
}

/*------------  Connection d'un client au server ------------------*/
userconnection = function userconnection(socket){
    // Ajout de l'utilsateurs aux tableaux des clients connectés
    clients.push({
        "pseudo": "",
        "socket": socket,
        "socketID": "",
    });
    console.log('Utilisateur connecté Id :'+socket.id);
    // TODO : Gestion de reconnection
}

/*------------  Ajout à la file d'attente ------------------*/ 
addToWaitingFile = function addToWaitingFile(socket){
    console.log( socket.id + " à la recherche d'un joueur ..." );
    file.push(socket);
}

/*------------ Envoie un message à un autre utilisateur ------------------*/ 
sendMessageToUser = function sendMessageToUser(socket,message){
    socket.emit('receiveMessage',message);
}

/*------------  Envoie un message aux joueurs de la partie ------------------*/ 
sendMessageToGame = function sendMessageToGame(socket,message){
    games.get(socket).emit('receiveMessage',message+socket.id)
    socket.emit('receiveMessage',message+games.get(socket).id);
}

/*------------ Un utilisateur se rend ------------------*/ 
surrender = function surrender(socket){
    console.log(socket.id+" : se rend. "+"On emit la victoire à :"+games.get(socket).id)
    // On notifie les deux joueurs true pour victoire
    games.get(socket).emit('receiveEndGame',true);
    socket.emit('receiveEndGame',false);
    // On enlève les utilisateurs du tableau games
    games = arrayRemove(games,socket);
    games = arrayRemove(games,games.get(socket));
}

/*------------  Modification de pseudo ------------------*/ 
setPseudo = function setPseudo(pseudo,socket){
    console.log(socket.id+" change son pseudo en "+pseudo);
    // Si l'utilisateur est en game, on notifie son adversaire
    if ( isOnGame(socket) ) games.get(socket).emit('receivePseudo',"Votre adversaire à changé son pseudo en :"+pseudo);
    socket.emit('receivePseudo',pseudo);
    // TODO : save pseudo local storage et maj bdd
}

/*------------  Classement  ------------------*/
getclassement = function getclassement(socket){
    // renvoiez tous clients sans les socket ID
    let x = [];
    // TODO : renvoiez tous clients sans les socket ID, lien bdd s
    let i = 0;
    for (let element of clients ){ 
     
        console.log(i+" :: "+clients[i]["socket"].id);
        x.push(clients[i]["socket"].id);
        
        i ++;
    }
    console.log("on renvoie ceci :",x)
 
    socket.emit('receiveClassement',JSON.stringify(x));
}

startGame = function startGame(socket){

    games.get(socket).emit("receiveAlert","Début de la Partie");
    socket.emit("receiveStartGame",true,true);
    games.get(socket).emit("receiveStartGame",false,true);
}

movePion = function (socket,l,c,newline,newcolumn,tour){
    socket.emit("receiveMovePion",l,c,newline,newcolumn,!tour)
    games.get(socket).emit("receiveMovePion",l,c,newline,newcolumn,!tour)
}
takePion = function (socket,l,c,newline,newcolumn,tour){
    socket.emit("receiveTakePion",l,c,newline,newcolumn,tour);
    games.get(socket).emit("receiveTakePion",l,c,newline,newcolumn,tour);
}
endTurn = function (socket,tour){
    socket.emit("receiveEndTurn",tour);
    games.get(socket).emit("receiveEndTurn",tour);
}

endGame = function endGame(socket){
    socket.emit("receiveEndTurn",!tour);
    games.get(socket).emit("receiveEndTurn",!tour);
    
}
// exports the variables and functions above so that other modules can use them
module.exports = userconnection;
module.exports = sendMessageToUser;
module.exports = sendMessageToGame;
module.exports = addToWaitingFile;
module.exports = searchplayer;
module.exports = updateWaitingFile;
module.exports = surrender;
module.exports = setPseudo;
module.exports = getclassement;
module.exports = movePion;
module.exports = takePion;
module.exports = endTurn;
module.exports = endGame;
module.exports = startGame;

// suprime un élément d'un tableau
function arrayRemove(arr, value) {

    return arr.filter(function(ele){
        return ele != value;
    });
 
}
// Affiche un tableau 
function printFile(){
    let i = 0;
    for (let element of file ){ 
        console.log(i+" : "+element.id);
        i ++;
    }
}